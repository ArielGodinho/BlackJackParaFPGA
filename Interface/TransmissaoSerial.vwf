/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2010 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1000.0;
	SIMULATION_TIME = 1000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("clock")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("reset")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("enviar")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("dadoParalelo")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 7;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("dadoParalelo[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "dadoParalelo";
}

SIGNAL("dadoParalelo[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "dadoParalelo";
}

SIGNAL("dadoParalelo[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "dadoParalelo";
}

SIGNAL("dadoParalelo[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "dadoParalelo";
}

SIGNAL("dadoParalelo[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "dadoParalelo";
}

SIGNAL("dadoParalelo[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "dadoParalelo";
}

SIGNAL("dadoParalelo[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "dadoParalelo";
}

SIGNAL("clockInterno")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("conteudoRegistrador")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 12;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("conteudoRegistrador[11]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "conteudoRegistrador";
}

SIGNAL("conteudoRegistrador[10]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "conteudoRegistrador";
}

SIGNAL("conteudoRegistrador[9]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "conteudoRegistrador";
}

SIGNAL("conteudoRegistrador[8]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "conteudoRegistrador";
}

SIGNAL("conteudoRegistrador[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "conteudoRegistrador";
}

SIGNAL("conteudoRegistrador[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "conteudoRegistrador";
}

SIGNAL("conteudoRegistrador[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "conteudoRegistrador";
}

SIGNAL("conteudoRegistrador[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "conteudoRegistrador";
}

SIGNAL("conteudoRegistrador[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "conteudoRegistrador";
}

SIGNAL("conteudoRegistrador[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "conteudoRegistrador";
}

SIGNAL("conteudoRegistrador[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "conteudoRegistrador";
}

SIGNAL("conteudoRegistrador[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "conteudoRegistrador";
}

SIGNAL("countDebug")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("countDebug[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "countDebug";
}

SIGNAL("countDebug[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "countDebug";
}

SIGNAL("countDebug[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "countDebug";
}

SIGNAL("countDebug[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "countDebug";
}

SIGNAL("loadRegisterDebug")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("pronto")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("resetCountDebug")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("saidaSerial")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("shiftRegisterDebug")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("subClockRunning")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

TRANSITION_LIST("clock")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 50000;
			LEVEL 0 FOR 0.01;
			LEVEL 1 FOR 0.01;
		}
	}
}

TRANSITION_LIST("reset")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("enviar")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 220.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 770.0;
	}
}

TRANSITION_LIST("dadoParalelo[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 1000.0;
	}
}

TRANSITION_LIST("dadoParalelo[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("dadoParalelo[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 1000.0;
	}
}

TRANSITION_LIST("dadoParalelo[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("dadoParalelo[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 1000.0;
	}
}

TRANSITION_LIST("dadoParalelo[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("dadoParalelo[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 1000.0;
	}
}

TRANSITION_LIST("clockInterno")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 8.33;
		NODE
		{
			REPEAT = 118;
			LEVEL 1 FOR 0.02;
			LEVEL 0 FOR 8.32;
		}
		LEVEL 1 FOR 0.02;
		LEVEL 0 FOR 7.53;
	}
}

TRANSITION_LIST("conteudoRegistrador[11]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 8.33;
		LEVEL 1 FOR 225.18;
		LEVEL 0 FOR 108.42;
		LEVEL 1 FOR 658.07;
	}
}

TRANSITION_LIST("conteudoRegistrador[10]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 8.33;
		LEVEL 1 FOR 233.52;
		LEVEL 0 FOR 100.08;
		LEVEL 1 FOR 658.07;
	}
}

TRANSITION_LIST("conteudoRegistrador[9]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 233.51;
		LEVEL 1 FOR 16.68;
		LEVEL 0 FOR 749.81;
	}
}

TRANSITION_LIST("conteudoRegistrador[8]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 8.33;
		LEVEL 1 FOR 225.18;
		LEVEL 0 FOR 8.34;
		LEVEL 1 FOR 16.68;
		LEVEL 0 FOR 83.4;
		LEVEL 1 FOR 658.07;
	}
}

TRANSITION_LIST("conteudoRegistrador[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 233.51;
		LEVEL 1 FOR 8.34;
		LEVEL 0 FOR 8.34;
		LEVEL 1 FOR 16.68;
		LEVEL 0 FOR 733.13;
	}
}

TRANSITION_LIST("conteudoRegistrador[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 8.33;
		LEVEL 1 FOR 225.18;
		LEVEL 0 FOR 8.34;
		LEVEL 1 FOR 8.34;
		LEVEL 0 FOR 8.34;
		LEVEL 1 FOR 16.68;
		LEVEL 0 FOR 66.72;
		LEVEL 1 FOR 658.07;
	}
}

TRANSITION_LIST("conteudoRegistrador[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 233.51;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 8.34;
			LEVEL 0 FOR 8.34;
		}
		LEVEL 1 FOR 16.68;
		LEVEL 0 FOR 716.45;
	}
}

TRANSITION_LIST("conteudoRegistrador[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 8.33;
		LEVEL 1 FOR 225.18;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 8.34;
			LEVEL 1 FOR 8.34;
		}
		LEVEL 0 FOR 8.34;
		LEVEL 1 FOR 16.68;
		LEVEL 0 FOR 50.04;
		LEVEL 1 FOR 658.07;
	}
}

TRANSITION_LIST("conteudoRegistrador[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 233.51;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 8.34;
			LEVEL 0 FOR 8.34;
		}
		LEVEL 1 FOR 16.68;
		LEVEL 0 FOR 699.77;
	}
}

TRANSITION_LIST("conteudoRegistrador[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 8.33;
		LEVEL 1 FOR 225.18;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 8.34;
			LEVEL 1 FOR 8.34;
		}
		LEVEL 0 FOR 8.34;
		LEVEL 1 FOR 16.68;
		LEVEL 0 FOR 33.36;
		LEVEL 1 FOR 658.07;
	}
}

TRANSITION_LIST("conteudoRegistrador[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 233.51;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 8.34;
			LEVEL 0 FOR 8.34;
		}
		LEVEL 1 FOR 16.68;
		LEVEL 0 FOR 683.09;
	}
}

TRANSITION_LIST("conteudoRegistrador[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 8.33;
		LEVEL 1 FOR 225.18;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 8.34;
			LEVEL 1 FOR 8.34;
		}
		LEVEL 0 FOR 8.34;
		LEVEL 1 FOR 16.68;
		LEVEL 0 FOR 16.68;
		LEVEL 1 FOR 658.07;
	}
}

TRANSITION_LIST("countDebug[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 233.51;
		NODE
		{
			REPEAT = 5;
			LEVEL 1 FOR 8.34;
			LEVEL 0 FOR 8.34;
		}
		LEVEL 1 FOR 8.34;
		LEVEL 0 FOR 674.75;
	}
}

TRANSITION_LIST("countDebug[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 241.85;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 16.68;
			LEVEL 0 FOR 16.68;
		}
		LEVEL 1 FOR 16.68;
		LEVEL 0 FOR 674.75;
	}
}

TRANSITION_LIST("countDebug[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 258.53;
		LEVEL 1 FOR 33.36;
		LEVEL 0 FOR 33.36;
		LEVEL 1 FOR 8.34;
		LEVEL 0 FOR 666.41;
	}
}

TRANSITION_LIST("countDebug[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 291.89;
		LEVEL 1 FOR 41.7;
		LEVEL 0 FOR 666.41;
	}
}

TRANSITION_LIST("loadRegisterDebug")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 225.17;
		LEVEL 0 FOR 108.42;
		LEVEL 1 FOR 666.41;
	}
}

TRANSITION_LIST("pronto")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 225.17;
		LEVEL 0 FOR 108.42;
		LEVEL 1 FOR 666.41;
	}
}

TRANSITION_LIST("resetCountDebug")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 225.17;
		LEVEL 0 FOR 108.42;
		LEVEL 1 FOR 666.41;
	}
}

TRANSITION_LIST("saidaSerial")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 241.85;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 8.34;
			LEVEL 1 FOR 8.34;
		}
		LEVEL 0 FOR 8.34;
		LEVEL 1 FOR 16.68;
		LEVEL 0 FOR 666.41;
	}
}

TRANSITION_LIST("shiftRegisterDebug")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 225.17;
		LEVEL 1 FOR 108.42;
		LEVEL 0 FOR 666.41;
	}
}

TRANSITION_LIST("subClockRunning")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 1000.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "clock";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "clockInterno";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "reset";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 2;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "enviar";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 3;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "dadoParalelo";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 4;
	TREE_LEVEL = 0;
	CHILDREN = 5, 6, 7, 8, 9, 10, 11;
}

DISPLAY_LINE
{
	CHANNEL = "dadoParalelo[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "dadoParalelo[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "dadoParalelo[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "dadoParalelo[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "dadoParalelo[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "dadoParalelo[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "dadoParalelo[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "pronto";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 12;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "conteudoRegistrador";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 13;
	TREE_LEVEL = 0;
	CHILDREN = 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25;
}

DISPLAY_LINE
{
	CHANNEL = "conteudoRegistrador[11]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 13;
}

DISPLAY_LINE
{
	CHANNEL = "conteudoRegistrador[10]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 13;
}

DISPLAY_LINE
{
	CHANNEL = "conteudoRegistrador[9]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 13;
}

DISPLAY_LINE
{
	CHANNEL = "conteudoRegistrador[8]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 13;
}

DISPLAY_LINE
{
	CHANNEL = "conteudoRegistrador[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 13;
}

DISPLAY_LINE
{
	CHANNEL = "conteudoRegistrador[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 13;
}

DISPLAY_LINE
{
	CHANNEL = "conteudoRegistrador[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 13;
}

DISPLAY_LINE
{
	CHANNEL = "conteudoRegistrador[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 21;
	TREE_LEVEL = 1;
	PARENT = 13;
}

DISPLAY_LINE
{
	CHANNEL = "conteudoRegistrador[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 22;
	TREE_LEVEL = 1;
	PARENT = 13;
}

DISPLAY_LINE
{
	CHANNEL = "conteudoRegistrador[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 23;
	TREE_LEVEL = 1;
	PARENT = 13;
}

DISPLAY_LINE
{
	CHANNEL = "conteudoRegistrador[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 24;
	TREE_LEVEL = 1;
	PARENT = 13;
}

DISPLAY_LINE
{
	CHANNEL = "conteudoRegistrador[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 25;
	TREE_LEVEL = 1;
	PARENT = 13;
}

DISPLAY_LINE
{
	CHANNEL = "countDebug";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 26;
	TREE_LEVEL = 0;
	CHILDREN = 27, 28, 29, 30;
}

DISPLAY_LINE
{
	CHANNEL = "countDebug[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 27;
	TREE_LEVEL = 1;
	PARENT = 26;
}

DISPLAY_LINE
{
	CHANNEL = "countDebug[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 28;
	TREE_LEVEL = 1;
	PARENT = 26;
}

DISPLAY_LINE
{
	CHANNEL = "countDebug[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 29;
	TREE_LEVEL = 1;
	PARENT = 26;
}

DISPLAY_LINE
{
	CHANNEL = "countDebug[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 30;
	TREE_LEVEL = 1;
	PARENT = 26;
}

DISPLAY_LINE
{
	CHANNEL = "loadRegisterDebug";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 31;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "resetCountDebug";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 32;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "saidaSerial";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 33;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "shiftRegisterDebug";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 34;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "subClockRunning";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 35;
	TREE_LEVEL = 0;
}

TIME_BAR
{
	TIME = 31700;
	MASTER = TRUE;
}
;
